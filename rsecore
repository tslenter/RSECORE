#!/bin/bash

#License:
#"Remote Syslog" is a free application what can be used to view syslog messages.
#Copyright (C) 2020 Tom Slenter
#
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program. If not, see <http://www.gnu.org/licenses/>.
#
#For more information contact the author:
#Name author: Tom Slenter
#E-mail: info@remotesyslog.com

#Variables
RSDEST=/opt/RSECORE
RSDESTCONF=/opt/RSECORE/config
SYSLOGCONF=/etc/syslog-ng/conf.d
APACONFIG=/etc/apache2/sites-available
RSBIN=/usr/bin
RSPATH=$(pwd)
APAPATH=/var/www/html

#Banner
function banner() {
    echo ""
    echo "##################################################"
    echo "#Remote Syslog Elasticsearch Core                #"
    echo "#More information: https://www.remotesyslog.com/ #"
    echo "#Remote Syslog installation                      #"
    echo "#Version: RSECORE 0.1                            #"
    echo "#Donations: https://github.com/tslenter/RSECORE  #"
    echo "##################################################"
    echo ""
}

#Check if user is root
if ! [ $(id -u) = 0 ]; then
    clear
    banner
    echo "This installation must be run as root!"
    echo ""
    exit 1
fi

#Functions to check files, packages ...
function check_package() {
echo "Check package $1"
dpkg-query -l $1 > /dev/null 2>&1
if [ $? = 0 ]
then
    echo "Installation found ..."
else
    echo "Installation failed, abort (Hint: Did you install the core? ..."
    exit
fi
}

#Check if file exist
function check_file() {
    file=$1
    if [ -e "$file" ]; then
        echo "File: $1 exists, continue installation ..."
    else
        echo "File: $1 does not exist, exit ..."
        exit
    fi
}

#Check files in reverse
function check_file_reverse() {
    file=$1
    if [ -e "$file" ]; then
        echo "File: $1 exists, module already installed? Exiting ..."
        exit
    else
        echo "File: $1 does not exist, continue installation ..."
    fi
}

#Check if debug module is activated
function mod_activ() {
    file=$1
    if [ -e "$file" ]; then
        echo "Module activated ..."
    else
        echo "Module not activated ..."
    fi
}

function rseinstallpackages() {
    echo "Check if Remote Syslog master installer is installed ..."
    check_file $RSBIN/rseinstaller
    echo "Notice: This installation is tested for Ubuntu Server 20.04 LTS and Debian 10.x ..."
    echo "Starting installation ..."
    echo "Update installer cache ..."
    if apt-add-repository multiverse -y > /dev/null 2>&1 ; then
        printf 'Multiverse command succeeded\n'
        apt-add-repository multiverse -y
    else
        printf 'Multiverse not found ...\n'
    fi
    apt update
#Install syslog-ng
    echo "Checking dependencies ..."
    apt -y purge rsyslog
    apt -y install syslog-ng wget tar git
}


#Install rseview
function rseviewinstall() {
    echo "Auto remove ..."
    if [ -d "$RSTMP/rseview_git" ]; then
         echo "Clearing directory ..."
         rm -rf $RSTMP/rseview_git
    else
         echo "No directory found ..."
    fi
    git clone https://github.com/tslenter/RSEVIEW $RSTMP/rseview_git
    if [ -d "$RSTMP/rseview_git" ]; then
         echo "Continue installation ..."
    else
         echo "Clone not successfull ..."
         exit
    fi
    cd $RSTMP/rseview_git/
    chmod +x $RSTMP/rseview_git/rseinstaller
    $RSTMP/rseview_git/rseinstaller
    cd $RSPATH
}

#Install rseview
function rseviewremove() {
    echo "Auto remove ..."
    if [ -d "$RSTMP/rseview_git" ]; then
         echo "Clearing directory ..."
         rm -rf $RSTMP/rseview_git
    else
         echo "No directory found ..."
    fi
    git clone https://github.com/tslenter/RSEVIEW $RSTMP/rseview_git
    if [ -d "$RSTMP/rseview_git" ]; then
         echo "Continue installation ..."
    else
         echo "Clone not successfull ..."
         exit
    fi
    cd $RSTMP/rseview_git/
    chmod +x $RSTMP/rseview_git/rseremover
    $RSTMP/rseview_git/rseremover
    cd $RSPATH
}

#Install rseuser
function rseuserinstall() {
    echo "Install rseuser ..."
    cp $RSDEST/rseuser $RSBIN
    chmod +x $RSBIN/rseuser
}

#Elastic only installation
function elasticinstall() {
#Check installation
    echo "Check if Raspberry Pi ..."
    drel="$(lsb_release -a | egrep 'Description:')"
    echo "$drel found ..."
    if [[ $drel =~ "Raspbian" ]]; then
        echo "Raspberry Pi detected ..."
        echo "It is slow and will probably break, but we install it anyway ..."
    else
        echo "Continue ..."
    fi
    echo "Check if master script Remote Syslog is installed ..."
    check_file "$RSBIN/rseinstaller"
#Install packages
    echo "Install required packages ..."
    apt install libapache2-mod-authnz-external php apache2 libapache2-mod-authz-unixgroup php-cli libpam0g-dev php-pear php-dev libapache2-mod-php build-essential jq -y
    check_package "libapache2-mod-authnz-external"
    check_package "apache2"
    check_package "php"
    check_package "libapache2-mod-authz-unixgroup"
    check_package "php-cli"
    check_package "libapache2-mod-php"
    check_package "libpam0g-dev"
    check_package "php-pear"
    check_package "php-dev"
    check_package "build-essential"
    check_package "jq"
#Load apache modules
    echo "Load modules ..."
    a2enmod proxy
    a2enmod proxy_http
    a2enmod headers
    a2enmod authnz_external
    a2enmod authz_unixgroup
    a2enmod rewrite
    a2enmod ssl
    a2enmod session
    a2enmod auth_form
    a2enmod request
    a2enmod session_cookie
    a2enmod session_crypto
#Elastic
    echo "Load Elastic ..."
    if [ -e "/etc/apt/sources.list.d/elastic-7.x.list" ]; then
        echo "Nothing to do ..."
    else
        wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | apt-key add -
        apt-get install apt-transport-https -y
        echo "deb https://artifacts.elastic.co/packages/7.x/apt stable main" | tee -a /etc/apt/sources.list.d/elastic-7.x.list
        echo "deb https://artifacts.elastic.co/packages/oss-7.x/apt stable main" | tee -a /etc/apt/sources.list.d/elastic-7.x.list
    fi
    apt update && apt install elasticsearch liblog4j2-java -y
    check_package "elasticsearch"
    check_package "liblog4j2-java"
#Writing config
#RSE Syslog-ng config
    echo "Update syslog-ng with RSE config ..."
    cp $RSDEST/config/97EL-rs.conf $SYSLOGCONF/97EL-rs.conf
#RSE elastic config
    elc="$(cat /etc/elasticsearch/elasticsearch.yml | grep cluster.name:.rsx | head -n 1)"
    if [[ $elc == *"cluster.name: rsx"* ]]; then
        echo "Config already written ..."
    else
        echo "Write elastic config ..."
        echo "cluster.name: rsx" >> /etc/elasticsearch/elasticsearch.yml
        echo "node.name: ${HOSTNAME}" >> /etc/elasticsearch/elasticsearch.yml
	echo "indices.breaker.fielddata.limit: 80%" >> /etc/elasticsearch/elasticsearch.yml
    fi
#Activate service on boot
    echo "Activate startup log configuration ..."
    systemctl enable elasticsearch
#Reload services
    echo "Increase start-up time to 360 seconds ..."
    mkdir /etc/systemd/system/elasticsearch.service.d
    echo -e "[Service]\nTimeoutStartSec=360" | sudo tee /etc/systemd/system/elasticsearch.service.d/startup-timeout.conf
    systemctl daemon-reload
    echo "Activate start/reload configuration ..."
    service elasticsearch start
    service syslog-ng restart
#Activate SSL
    echo "Activate SSL ..."
#Setup variables:
    varfullservername=$(host -TtA $(hostname -s)|grep "has address"|awk '{print $1}')
    certpath=/etc/cert
    echo "Create .rnd file ..."
    touch $HOME/.rnd
    echo "Certificate auto request for linux webservers!"
    echo "Powered by RSE ..."
    echo "Generate Certificate ..."
    if [ -f $HOME/.rnd ]; then
       echo "File $HOME/.rnd exists ..."
       openssl req -new -x509 -days 3650 -sha256 -newkey rsa:2048 -subj "/C=NL/ST=Limburg/L=Maastricht/O=IT/CN=$varfullservername" -nodes -keyout $HOME/$varfullservername.key -out $HOME/$varfullservername.crt
       echo "Copy SSL certificates ..."
       if [ -d $certpath ]; then
           echo "Directory already exist ..."
       else
           mkdir $certpath
           echo "Directory created ..."
       fi
       cp $HOME/$varfullservername.key $certpath/rs.key
       cp $HOME/$varfullservername.crt $certpath/rs.crt
       echo "Setup permissions ..."
       chmod 600 $certpath/rs.key
       echo "Clean up ..."
       rm -rf $HOME/$varfullservername.key
       rm -rf $HOME/$varfullservername.crt
       echo "Generated key file: $certpath/rs.key"
       echo "Generated cert file: $certpath/rs.crt"
       check_file $certpath/rs.key
       check_file $certpath/rs.crt
    else
       echo "No .rnd found ..."
    fi
#Proxy setup
    echo "Activate proxy ..."
    echo "Disable default config ..."
    cp -rf $RSDEST/config/eonly-apache.conf $APACONFIG/eonly-apache.conf
    check_file $APACONFIG/eonly-apache.conf
    a2ensite eonly-apache
    a2dissite 000-default
    echo "Remove old port.conf to disable port 80 ..."
    rm /etc/apache2/ports.conf
    touch /etc/apache2/ports.conf
#Load services
    echo "Reload apache services ..."
    service apache2 restart
#Final message
    echo "RSE installation done ..."
}

function elasticconfig() {
    curlcheck="$(dpkg-query -l curl | egrep '<none>')"
    if [[ $curlcheck =~ "<none>" ]]; then
        echo "curl missing ..."
        apt install curl -y
    else
        echo "Installation found ..."
    fi
	check_package "curl"
	echo "Wait 60 sec for API activation ..."
    for i in {60..01};
        do $l;
        echo -n "$i ";
        sleep 1;
    done

	urlstatus="$(curl -XGET http://localhost:9200/_ilm/status -I | egrep 200)"
	if [[ $urlstatus =~ "200" ]]; then
		echo "Elasticsearch service is running ..."
		echo "Send test message ..."
		rseview -t
		echo "Enable default lifecycle to RSE index ..."
		curl -XPUT --header 'Content-Type: application/json' http://localhost:9200/_ilm/policy/rs-policy -d '
		{
			"policy": {
				"phases": {
					"hot": {
						"min_age": "0ms",
						"actions": {
							"rollover": {
								"max_primary_shard_size": "5gb",
								"max_age": "75d"
							}
						}
					},
					"delete": {
						"min_age": "75d",
						"actions": {
							"delete": {
								"delete_searchable_snapshot": true
							}
						}
					}
				}
			}
		}'
		curl -XPUT --header 'Content-Type: application/json' http://127.0.0.1:9200/_template/rs-syslog -d '
		{
			"template":"rsx-syslog*",
			"settings": {
			"number_of_replicas": 1,
			"number_of_shards": 1,
			"index.lifecycle.name": "rs-policy",
			"index.lifecycle.rollover_alias": "rsx-syslog"
			}
		}'
                curl -XDELETE --header "Content-Type: application/json" http://localhost:9200/rsx-syslog*
                echo ""
	        echo "Send test message ..."
	        rseview -t
                echo "Done ..."
        else
                echo "Elasticsearch not in time activated? Use CLI to setup the lifecycle ..."
        fi
}

#Elastic only removal
function precheckremove() {
   if [ -f "$APAPATH/rsc/index.php" ]; then
       echo "RSC web is installed please remove this first ..."
       exit
   elif [ -f $APACONFIG/rsx-apache.conf ]; then
       echo "RSX web is installed please remove this first ..."
       exit
   elif [ -f "$APAPATH/rse/index.php" ]; then
       echo "RSE web is installed please remove this first ..."
       exit
   else
       guinotinstalled
   fi
}

function guinotinstalled() {
#Remove Syslog-NG config
    rm -rf $SYSLOGCONF/97EL-rs.conf
    echo "Restart Syslog-NG ..."
    service syslog-ng restart
#Remove Apache config
    rm -rf $certpath/rs.key
    rm -rf $certpath/rs.crt
    rm -rf $APACONFIG/*
#Remove packages
    echo "Remove config ..."
    rm -rf /etc/apt/sources.list.d/elastic-7.x.list
    rm -rf /etc/elasticsearch/elasticsearch.yml
    rm -rf /etc/systemd/system/elasticsearch.service.d/startup-timeout.conf
    echo "Remove packages ..."
    apt -y purge elasticsearch liblog4j2-java libapache2-mod-authnz-external php apache2 libapache2-mod-authz-unixgroup php-cli libpam0g-dev php-pear php-dev libapache2-mod-php build-essential -y
    apt -y install syslog-ng
    apt -y autoremove
    echo "Eleastic removed ..."
}

#Remove core
function coreremove() {
    echo "Check if Remote Syslog is installed ..."
    check_file "$RSDEST/rsecore"
    echo "Starting core removal ..."
    echo "Configuring syslog-ng ..."
    rm -rf $SYSLOGCONF/97EL-rs.conf
    if [ -e "$SYSLOGCONF/99-remote-local.conf" ]; then
        rm -rf $SYSLOGCONF/99-remote-local.conf
    else
        echo "No local debug found ..."
    fi
    echo "Removing packages syslog-ng ..."
    apt -y purge syslog-ng
    apt -y autoremove
    apt -y install rsyslog
    echo "Remove application for CLI logging ..."
    rseviewremove
    echo "Remove $RSDEST"
    rm -rf $RSDEST
    echo "Remove user management ..."
    rm -rf $RSBIN/rseuser
    echo "Remove REPO file ..."
	if [ -e "/etc/apt/sources.list.d/91-debian-unstable.list" ]; then
        rm -rf /etc/apt/sources.list.d/91-debian-unstable.list
	else
	    echo "No debian source found ..."
    fi
}

#Upgrade online
function upgrade() {
    echo "Check if Remote Syslog Core is installed ..."
    check_file $RSDEST/rsecore
    echo "Starting upgrade ..."
    echo "Download installation ..."
    git clone --branch main https://github.com/tslenter/RSECORE $RSTMP/RSECORE
    echo "Check if download is successfull ..."
    if [ -d "$RSTMP/RSECORE" ]; then
         echo "Continue installation ..."
    else
         echo "Clone not successfull ..."
         exit
    fi
    cp -rf $RSTMP/RSECORE/* $RSDEST
    rm -rf $RSTMP/RSECORE
    echo "Start update ..."
    echo "Deploying application for CLI logging ..."
    rseviewinstall
    echo "Deploying user management ..."
    cp -rf $RSDEST/rseuser $RSBIN/rseuser
    echo "Set permissions for user management ..."
    chmod +x $RSBIN/rseuser
    echo "Set new default core configuration in $SYSLOGCONF/ ..."
    cp -rf $RSDEST/config/97EL-rs.conf $SYSLOGCONF/97EL-rs.conf
    echo "Copy upgrade file to $RSTMP/ ..."
    cp -rf $RSDEST/extraupgrade $RSTMP/extraupgrade
    chmod +x $RSTMP/extraupgrade
    $RSTMP/extraupgrade
    echo "Remove update file ..."
    rm -rf $RSTMP/extraupgrade
    echo "Remove upgrade folder ..."
    rm -rf $RSTMP/rs
    echo "Restart syslog-ng ..."
    service syslog-ng restart
    echo "Set new default Apache configuration in $SYSLOGCONF/ ..."
    cp -rf $RSDEST/config/eonly-apache.conf $APACONFIG/eonly-apache.conf
    echo "Restart apache ..."
    service apache2 restart
}

function debvarcheck() {
    echo "Debian found ..."
    echo "Update debian path ..."
    PATH="/usr/sbin:$PATH"
    echo "Install ufw ..."
    fwcheck=$(dpkg-query -l ufw)
    if [[ $fwcheck =~ "ufw" ]]; then
        echo "Going for check 2 ..."
        ufwcheck2="$(dpkg-query -l ufw | egrep '<none>')"
        if [[ $ufwcheck2 =~ "<none>" ]]; then
            echo "ufw missing ..."
            apt install ufw -y
        else
            echo "Installation found ..."
        fi
    else
        echo "ufw missing ..."
        apt install ufw -y
    fi
    if [ -e "/etc/apt/sources.list.d/91-debian-unstable.list" ]; then
        echo "Nothing to do ..."
    else
        echo "Original the installation is tested for CLI only without desktop GUI"
        echo ""
        echo "Yes[y] could break the desktop GUI of Raspberry Pi!"
        read -p "Do you want to use Elasticsearch products? y/n " -n 1 -r
        echo ""
        if [[ $REPLY =~ ^[Yy]$ ]]
        then
            echo "Going for the unstable syslog-ng for Elasticsearch!"
            apt install gnupg -y
            apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 648ACFD622F3D138
            apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 04EE7237B7D453EC
            echo "deb http://mirror.yandex.ru/debian/ unstable main" | tee -a /etc/apt/sources.list.d/91-debian-unstable.list
            echo "deb-src http://mirror.yandex.ru/debian/ unstable main" | tee -a /etc/apt/sources.list.d/91-debian-unstable.list
        else
            echo "Going for the default syslog-ng installation! ..."
            touch /etc/apt/sources.list.d/91-debian-unstable.list
        fi
    fi
}

function ubntrepofix() {
#Syslog-ng
    echo "Update repository's ..."
    echo "Load syslog-ng ..."
    echo "Check if ARM ..."
    drel="$(uname -a | egrep 'aarch64')"
    echo "$drel found ..."
    if [[ $drel =~ "aarch64" ]]; then
        echo "ARM detected ..."
        echo "Apply fix ..."
        sudo echo "" > /etc/apt/sources.list.d/syslog-ng.list
    else
        echo "Continue ..."
    fi
#Java path fix
    JVMPATH="$(cat /etc/environment | egrep 'LD_LIBRARY_PATH')"
    if [[ $JVMPATH =~ "jdk" ]]; then
        echo "Java environment found ..."
        echo "Continue ..."
    else
        echo "LD_LIBRARY_PATH=/usr/lib/jvm/java-11-openjdk-amd64/lib/server" >> /etc/environment
    fi
    drel="$(lsb_release -a | egrep 'Codename:')"
    if [ -e "/etc/apt/sources.list.d/syslog-ng.list" ]; then
        echo "Nothing to do ..."
    elif [[ $drel =~ "bionic" ]]; then
        touch /etc/apt/sources.list.d/syslog-ng.list
        wget -qO - https://cloud.remotesyslog.com/xUbuntu_18.04/Release.key | /usr/bin/apt-key add -
        echo deb https://cloud.remotesyslog.com/xUbuntu_18.04 ./ > /etc/apt/sources.list.d/syslog-ng.list
        apt update
        apt auto-remove -y
#If upgrade is triggered
        apt install syslog-ng -y
        check_package "syslog-ng"
    elif [[ $drel =~ "focal" ]]; then
        touch /etc/apt/sources.list.d/syslog-ng.list
        wget -qO - https://cloud.remotesyslog.com/xUbuntu_20.04/Release.key | /usr/bin/apt-key add -
        echo deb https://cloud.remotesyslog.com/xUbuntu_20.04 ./ > /etc/apt/sources.list.d/syslog-ng.list
        apt update
        apt auto-remove -y
#If upgrade is triggered
        apt install syslog-ng -y
        check_package "syslog-ng"
    else
        echo "No distro found ..."
        exit
    fi
}

#Release check
function distocheck() {
    echo "Check release ..."
    drel="$(lsb_release -a | egrep 'Codename:')"
    echo "$drel found ..."
    if [[ $drel =~ "buster" ]]; then
        debvarcheck
    elif [[ $drel =~ "sid" ]]; then
        debvarcheck
    elif [[ $drel =~ "bionic" ]]; then
        echo "Ubuntu found ..."
        ubntrepofix
        echo "Done ..."
    elif [[ $drel =~ "focal" ]]; then
        echo "Ubuntu found ..."
        ubntrepofix
        echo "Done ..."
    elif [[ $drel =~ "hirsute" ]]; then
        echo "Ubuntu found ..."
        ubntrepofix
        echo "Done ..."
     else
        echo "No distro detected ..."
        exit
    fi
}

#Enable firewall
function fwenable() {
    echo "Install package ufw ..."
    apt install -y ufw
    echo "Activation of ufw rules ..."
    check_package "ufw"
    echo "Setting firewall rules ..."
    ufw allow 22/tcp
    ufw allow 8080/tcp
    ufw allow 80/tcp
    ufw allow 443/tcp
    ufw allow 514/tcp
    ufw allow 514/udp
    ufw --force enable
    ufw status
    echo "Done ..."
}

#Disable firewall
function fwdisable() {
    check_package "ufw"
    echo "Disable firewall rules ..."
    ufw disable
    ufw status
    echo "Done ..."
}

#Activate debug for rsview
function startdebug() {
    echo "Activate local syslog for debug ..."
    cp -rf $RSDESTCONF/syslog-ng-local $SYSLOGCONF/99-remote-local.conf
    echo "Restart syslog-ng ..."
    service syslog-ng restart
}

#Stop debug for rsview
function stopdebug() {
   echo "Deactivate local syslog for debug ..."
   rm -rf $SYSLOGCONF/99-remote-local.conf
   echo "Restart syslog-ng ..."
   service syslog-ng restart
}

#Thank you message
function quit() {
    echo "Thank you for using Remote Syslog ..."
    exit
}

#Check if core is correctly installed
function checkinstallationcore() {
    echo "Check CLI application 1X ..."
    check_file $RSBIN/rseview
    echo "Check user management 1X ..."
    check_file $RSBIN/rseuser
    echo "Check installer 1X ..."
    check_file $RSDEST/rsecore
    echo "Check syslog-ng 1X ..."
    check_file $SYSLOGCONF/97EL-rs.conf
    echo "Check reconfiguration files 1X ..."
    check_file $RSDEST/config/syslog-ng-local
    echo "Optional: check if debug module is activated:"
    mod_activ $SYSLOGCONF/99-remote-local.conf
}

#Environment setup
clear
banner
echo "Setting up environment ..."
echo "Check 1 ..."
if [ -e $RSPATH/rsecore ]; then
    echo "rsinstaller found in local directory, copy to $RSDEST started ..."
    if [ -d $RSDEST ]; then
        echo "Directory already exist ..."
    else
        mkdir $RSDEST
        echo "Directory created ..."
    fi
    cp -rf $RSPATH/* $RSDEST
elif [ -e $RSDEST/rsecore ]; then
    echo "rsinstaller run from $RSDEST, going for $RSDEST environment ..."
else
    echo "Did you run the installer from the right directory? ..."
fi

clear
banner
#Menu
PS3='Please enter your choice: '
options=("Core installation" "Core removal" "Core upgrade" "Activate firewall" "Disable firewall" "Add local syslog to RS core" "Remove local syslog from RS core" "Quit")
select opt in "${options[@]}"
do
    case $opt in
        "Core installation")
            clear
            banner
            distocheck
            rseinstallpackages
            elasticinstall
            rseviewinstall
            elasticconfig
            rseuserinstall
            checkinstallationcore
            quit
            exit
    ;;
        "Core removal")
            clear
            banner
            precheckremove
            coreremove
            quit
            exit
    ;;
        "Core upgrade")
            clear
            banner
            upgrade
            quit
            exit
    ;;
        "Activate firewall")
            clear
            banner
            distocheck
            fwenable
            quit
            exit
    ;;
        "Disable firewall")
            clear
            banner
            distocheck
            fwdisable
            quit
            exit
    ;;
        "Add local syslog to RS core")
            clear
            banner
            distocheck
            startdebug
            quit
            exit
    ;;
        "Remove local syslog from RS core")
            clear
            banner
            distocheck
            stopdebug
            quit
            exit
    ;;
        "Quit")
            break
    ;;
        *) echo "Invalid option $REPLY ..." ;;
    esac
done
